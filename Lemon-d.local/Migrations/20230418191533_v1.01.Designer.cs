// <auto-generated />
using System;
using Lemon_d.local.Database.DbModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lemon_d.local.Migrations
{
    [DbContext(typeof(MasterDbContext))]
    [Migration("20230418191533_v1.01")]
    partial class v101
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Company", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Genre", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AverageCompletion")
                        .HasColumnType("int");

                    b.Property<int>("AverageRating")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrentlyPlayingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FavouriteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("MostWantedID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlatformsOwnedID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentlyPlayingID");

                    b.HasIndex("FavouriteID");

                    b.HasIndex("MostWantedID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PlatformsOwnedID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.PersonalRating", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NoteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NoteID");

                    b.ToTable("PersonalRating");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Platform", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlatformsID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("PlatformsID");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Platforms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreferredPlatformID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("PreferredPlatformID");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Project", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GiantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GlobalRating")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonalRatingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PlannedFor")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlatformsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlayerAmount")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectListID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SlugDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VoteForRemoval")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("GiantID");

                    b.HasIndex("PersonalRatingID");

                    b.HasIndex("PlatformsID");

                    b.HasIndex("ProjectListID");

                    b.ToTable("Projects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Project");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.ProjectList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedById");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Tag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.UserCompletion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Completion")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserId");

                    b.ToTable("UserCompletion");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels._AdditionalClasses.Image", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels._AdditionalClasses.Note", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectListID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProjectListID");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Giant", b =>
                {
                    b.HasBaseType("Lemon_d.local.Database.DbModels.Project");

                    b.HasDiscriminator().HasValue("Giant");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Company", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Project", null)
                        .WithMany("Companies")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Genre", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Project", null)
                        .WithMany("Genres")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Identity.AppUser", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Project", "CurrentlyPlaying")
                        .WithMany()
                        .HasForeignKey("CurrentlyPlayingID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lemon_d.local.Database.DbModels.Project", "Favourite")
                        .WithMany()
                        .HasForeignKey("FavouriteID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lemon_d.local.Database.DbModels.Project", "MostWanted")
                        .WithMany()
                        .HasForeignKey("MostWantedID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lemon_d.local.Database.DbModels.Platforms", "PlatformsOwned")
                        .WithMany()
                        .HasForeignKey("PlatformsOwnedID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CurrentlyPlaying");

                    b.Navigation("Favourite");

                    b.Navigation("MostWanted");

                    b.Navigation("PlatformsOwned");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.PersonalRating", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels._AdditionalClasses.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Platform", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Platforms", null)
                        .WithMany("AvailablePlatforms")
                        .HasForeignKey("PlatformsID");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Platforms", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Platform", "PreferredPlatform")
                        .WithMany()
                        .HasForeignKey("PreferredPlatformID");

                    b.Navigation("PreferredPlatform");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Project", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Giant", null)
                        .WithMany("Projects")
                        .HasForeignKey("GiantID");

                    b.HasOne("Lemon_d.local.Database.DbModels.PersonalRating", "PersonalRating")
                        .WithMany()
                        .HasForeignKey("PersonalRatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lemon_d.local.Database.DbModels.Platforms", "Platforms")
                        .WithMany()
                        .HasForeignKey("PlatformsID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lemon_d.local.Database.DbModels.ProjectList", null)
                        .WithMany("Projects")
                        .HasForeignKey("ProjectListID");

                    b.Navigation("PersonalRating");

                    b.Navigation("Platforms");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.ProjectList", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Identity.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Tag", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Project", null)
                        .WithMany("Tags")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.UserCompletion", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Project", null)
                        .WithMany("Completions")
                        .HasForeignKey("ProjectID");

                    b.HasOne("Lemon_d.local.Database.DbModels.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels._AdditionalClasses.Image", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Project", null)
                        .WithMany("Images")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels._AdditionalClasses.Note", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Identity.AppUser", "Author")
                        .WithMany("Notes")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Lemon_d.local.Database.DbModels.Project", null)
                        .WithMany("Notes")
                        .HasForeignKey("ProjectID");

                    b.HasOne("Lemon_d.local.Database.DbModels.ProjectList", null)
                        .WithMany("Notes")
                        .HasForeignKey("ProjectListID");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lemon_d.local.Database.DbModels.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Lemon_d.local.Database.DbModels.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Identity.AppUser", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Platforms", b =>
                {
                    b.Navigation("AvailablePlatforms");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Project", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Completions");

                    b.Navigation("Genres");

                    b.Navigation("Images");

                    b.Navigation("Notes");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.ProjectList", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Lemon_d.local.Database.DbModels.Giant", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
